[INCLUDE=presentation]
Title         : Verified Programming in F*
Sub Title     : Tutorial at POPL '15
Author        : Karthik Bhargavan, Cedric Fournet, Catalin Hritcu, Aseem Rastogi, _Nikhil Swamy_
Affiliation   : Microsoft Research, INRIA, MSR-INRIA, IMDEA, UMD
Reveal Theme  : solarized
Beamer Theme  : singapore
Reveal Url    : ./reveal
Colorizer     : ../../tutorial/fstar
Package       : semantic
Logo          : False

~ MathDefs
[INCLUDE=sem.tex]
~

~Slide
Nothing

~

~Slide
##Verified Programming in F*
Tutorial at POPL '15

##### Karthik Bhargavan, C&eacute;dric Fournet, Catalin Hritcu, Aseem Rastogi, _Nikhil Swamy_
##### Antoine Delignat-Lavaud, Chantal Keller, Pierre-Yves Strub
  
Microsoft Research, INRIA, MSR-INRIA, IMDEA, UMD

* Check that you can access [http://fstar-lang.org/tutorial] 
* Special thanks to Antoine for the website.

[http://fstar-lang.org/tutorial]: http://fstar-lang.org/tutorial
[http://fstar-lang.org]: http://fstar-lang.org
~

<!-------------------------------------------------------------------------------->

## Many semi-automated verifiers 
### For first-order programming languages

![fo-verifiers]

[fo-verifiers]: img/fo-verifiers.png

<!-------------------------------------------------------------------------------->

## But, what about lambdas?

![ho-langs]

### Modern languages use higher-order constructs pervasively

[ho-langs]: img/ho-langs.png

<!-------------------------------------------------------------------------------->

## 

![fstar-logo]

### Semi-automated verification for ML-like languages

* Higher order
* Effectful
* Call by value

[fstar-logo]: img/fstar.png

<!-------------------------------------------------------------------------------->

## A first taste 

* {.fragment} Write idiomatic code
```fstar
let rec factorial n = 
    if n = 0 then 1 
    else n * factorial (n - 1)
```

* {.fragment} Give it a specification, claiming that `factorial` is a
total function from non-negative to positive integers.  
```fstar 
val factorial: n:int{n >= 0} -> Tot (i:int{i >= 1}) 
```

* {.fragment} Ask F* to check it
```
fstar factorial.fst
Verified module: Factorial
All verification conditions discharged successfully
```

<!-------------------------------------------------------------------------------->

~Slide
```
fstar factorial.fst
Verified module: Factorial
All verification conditions discharged successfully
```

#### F* builds a typing derivation of the form:

$\Gamma_{\mbox{prelude}} \vdash \mbox{\texttt{let factorial n = e}} : t \Leftarrow \phi$

- In a context $\Gamma_{\mbox{prelude}}$ including definitions of F* primitives

- The program $\mbox{\texttt{let factorial n = e}}$ has type $t$,
  given the validity of a logical formula $\phi$

- $\phi$ is passed to [Z3] (an automated theorem
  prover/SMT solver) to check for validity

- If the check succeds, then, from the metatheory of F*, the program is
  safe at type $t$

[Z3]: http://research.microsoft.com/z3
~

<!-------------------------------------------------------------------------------->

~Slide

#### A brief history of an evolving line of languages ...

![timeline]

* A type-preserving compiler to .NET bytecode (Fine)

* Security of an implementation of the TLS 1.2 standard (F7)

* Self-certification: Certifying F\* using F\* and Coq (POPL '12)

* A fully abstract compiler from F\* to JavaScript (POPL '13)

* TS*: An embedded, secure subset of TypeScript (POPL '14)

* Probablistic relational logic for verified crypto (POPL '14)

* {.fragment} F\* v1.0: Open source, programmed entirely in F\*, bootstrapped in
  OCaml and F\#.  More streamlined, expressive, and efficient than
  prior versions.

[timeline]: img/timeline.png
~

~Slide

![arch]

[arch]: img/arch.png
~

~Slide

### In the works

* A high-efficiency implementation of TLS (and other crypto)
 - Drop-in replacement for OpenSSL

* Compiling to native code and small TCBs 
 - Certifying the F\* implementation (again)
 - Compiling to CompCert, Coq-x86, IronClad
 - Compiling to ASM.js

* F\* as a proof assistant 
 
 - Software foundations
 - Formalizing F\* in F\*

~

<!-------------------------------------------------------------------------------->
<!-- consumed 10 mins so far --> 

~Slide

### Plan

* Tiny F*: A tour of (a tiny fragment of) the type system

* Work through [http://www.fstar-lang.org/tutorial/]

* We hope to cover: Sections 1.1, 3.2, 3.3, 4.0, 4.1, 4.2
  
  -- Refinement types, dependent functions, indexed effects

  -- Proving properties about pure functions on `int`s and `list`s

* Try out the rest of the tutorial yourself
  - Ask questions, report bugs!
  - [http://github.com/FStarLang/FStar/issues]

[http://github.com/FStarLang/FStar/issues]: http://github.com/FStarLang/FStar/issues

<!--
  1.1 Basic ACLs  (15 mins)

  3.2 Factorial, dependent functions and the fibonacci exercise (15 mins)

  3.3 Lemmas (10 mins)
  
  4.0, 4.1, 4.2: Simple list programs (20 mins)

(+ 10  ;intro                     Nik
   20  ;Tiny F*                   Nik 
   15  ;basic acls + setup        Nik
   15  ;factorial and fibonacci   Catalin
   10  ;lemmas                    Catalin
   20  ;list functions            Catalin
   )
--> 

[http://www.fstar-lang.org/tutorial/]: http://www.fstar-lang.org/tutorial/

~

<!-------------------------------------------------------------------------------->

~Slide

### Syntax of tiny-F*

Expressions
```fstar
e ::= x | () | -1 | 0 | 1 | ... | if0 e then e1 else e2 | let x = e1 in e2  
   | fun (x:t) -> e | e1 e2 | !e | e1 := e2 
```

Operational semantics: 

- Standard call-by-value
- State is primitive 

~

<!-------------------------------------------------------------------------------->
~Slide

### Syntax of tiny-F*

Types `t` and logical specs `phi`

```fstar
phi,t ::= unit | int | ref int           
        | x:t1 -> M t2 phi                //Co-domain is an effect, type and spec
                                          //rest only for logical specs in Tiny F* 
        | phi /\ phi | phi \/ phi | ~phi    
        | phi ==> phi | forall (x:t). phi
        | a | phi e | phi t               //variables, predicate applications
        | fun (a:k) -> phi                //type-to-type functions
        | fun (x:t) -> phi                //term-to-type functions
        | ...                        
```

Kinds

```fstar
k ::= Type | x:t -> k | a:k -> k'
```

For example:
```fstar
val factorial:  x:int -> PURE int (fun (post:int->Type) ->
                                        x>=0 /\ forall y. y>0 ==> post y)
```

~

<!-------------------------------------------------------------------------------->

~Slide 

### Types, effects, and weakest pre-conditions

For every expression `e`, F* computes a triple `M t wp`

1. `M` is a label, drawn from: `{PURE, STATE}`, is an upper bound on
the effect of `e`.

2. `t` is the type of the value returned by `e` (if any)

3. `wp` is a predicate transformer corresponding to the semantics of `e`

For example:
```fstar
factorial i : PURE int wp_1 
e1 := e2    : STATE unit wp_2
```
~

~Slide

###Specifying effects

* `(PURE t wp)` is the type of a pure computation that always returns
  `(v:t)` such that, for all `post`, we have `wp post ==> post v`.

* {.fragment} The `PURE` effect
```fstar
    kind Pre = Type                     
    kind Post (a:Type) = a -> Type      
    kind WP   (a:Type) = Post a -> Pre  
    type return a x post = post x
    type bind (a:Type) (wp1:WP a) (wp2: a -> WP b) (post:Post b) = 
    wp1 (fun x -> wp2 x post)
```

* {.fragment} For example:
```fstar
factorial x : PURE int (fun (post:PURE.Post int) -> //for any post-condition post
                               x >= 0  //prove that argument is non-negative
                            /\ forall y. y > 0 ==> post y) //assume the result is positive
```
F\* can also reason about total terms by their definitions; e.g., F\* 
proves `factorial 3 = 6` simply by unfolding definitions.

~

~Slide 
###Specifying effects

* `(STATE t wp)` is the type of a computation which, when run in heap
  `h0`, may _**read**_ or _**write**_ the state, and then
  _**diverges**_ or returns a value `(v:t)` in heap `h1` satisfying
  `(post v h1)` if `(wp post h0)` is valid (for all `post`).

* {.fragment} The `STATE` effect
```fstar
    kind Pre = heap -> Type  //a predicate on the input heap
    kind Post (a:Type) = a -> heap -> Type //relates the result to the output heap
    kind WP   (a:Type) = Post a -> Pre
    type return a x post = post x
    type bind a wp1 wp2 post = wp1 (fun x -> wp2 x post)
```

* {.fragment} Sub-effects: Lifting `PURE` to `STATE`
```fstar
   type lift : a:Type -> PURE.WP a -> STATE.WP a =
     fun (a:Type) (wp:PURE.WP a) (post:STATE.Post a) (h:heap) -> wp (fun x -> post x h)
```
~


~Slide
### Syntactic sugar 

* {.fragment} The type of total computations
```fstar
Tot t = PURE t (fun post -> forall (x:t). post x)
```

* {.fragment} Curried functions are total at each arrow, by default
```fstar
    x1:t1 -> x2:t2 -> ... -> xn:tn -> M t wp =
    x:t1 -> Tot (x2:t2 -> ... -> Tot (xn:tn -> M t wp))
```

* {.fragment} The last arrow has default `All` effect
```fstar
    x1:t1 -> x2:t2 -> ... -> xn:tn -> t =
    x1:t1 -> x2:t2 -> ... -> xn:tn -> All t
```
For tiny F*: 
```fstar
    All t = STATE t (fun post h -> forall x h'. post x h')
```
For full F*, `All=ML`, which includes other effects too, like exceptions and IO.
~


~Slide
### Specifying effectful primitives

```fstar
assume val (!): r:ref int
             -> STATE int (fun post h -> post (sel h r) h)

assume val (:=): r:ref int
              -> v:int
              -> STATE unit (fun post h -> post () (upd h r v))
```

* where, we model `heap` as a map, using the functions:
```fstar
val sel: heap -> ref int -> Tot int
val upd: heap -> ref int -> int -> Tot heap
assume forall h x v. sel (upd h x v) x = v
assume forall h x y v. x<>y ==> sel (upd h x v) y = sel h y
```

~

~Slide
### As Hoare triples

```fstar
assume val (!): r:ref int
              -> ST int (requires (fun h -> True))
                        (ensures (fun h x h' -> h=h' /\ x=sel h r))

assume val (:=): r:ref int
              -> v:int
              -> ST unit (requires (fun h -> True)
                         (ensures (fun h x h' -> h'=upd h r v))
```

* In general, 
```fstar
    ST a (requires pre) (ensures post) = 
    STATE a (fun p h -> pre h /\ forall x h'. post h x h' ==> p x h')

    Pure a (requires pre) (ensures post) = 
    PURE a (fun p -> pre /\ forall x. post x ==> p x)
```

~


~Slide
### A stateful program and its type

```fstar
let swap x y = 
    let tmp = !x in 
    x := !y; 
    y := tmp
```

```fstar
val swap: x:ref int 
       -> r:ref int 
       -> ST unit (requires (fun h -> True))
                  (ensures (fun h x h' -> h' = upd (upd h x (sel h y)) y (sel h x)))
```
~

~Slide
### Typing values (selected judgments)

~~ Snippet
\begin{small}
\[
\begin{array}{c}
{\Gamma \vdash e : t}
\\[0.5cm]
\inference[(T-Var)]{\Gamma(x) = t}
          {\Gamma \vdash x : t}
\\[0.5cm]

\inference[(T-Const)]{e\in\{\ldots,-1,0,1,\ldots\}}
          {\Gamma \vdash e : int}
\\[0.5cm]
\inference[(T-Abs)]{\Gamma,x:t \vdash e : M~t~wp}
          {\Gamma \vdash \mbox{\it fun}~(x:t) \rightarrow e ~:~ x\!:\!t \rightarrow M~t~wp}
\end{array}
\]
\end{small}
~~

~

~Slide
### Typing expressions (selected judgments)

~~ Snippet
\begin{small}
\[
\begin{array}{c}
{\Gamma \vdash e : M~t~wp}
\\[0.2cm]

\inference[(T-Ret)]{\Gamma \vdash e : t}
          {\Gamma \vdash e :  \pure~t~(\pure.\retern~e)}
\\[0.5cm]

\inference[(T-Let)]{\Gamma \vdash e_1 : M~t_1~wp_1 &
            \Gamma,x:t_1 \vdash e_2 : M~t_2~wp_2 & 
            x \not\in FV(t_2)}
          {\Gamma \vdash \mbox{\it let}~x = e_1~\mbox{\it in}~e_2 : M~t_2~(M.\mbox{\it bind}~wp_1~(\mbox{\it fun}~x \rightarrow wp_2))}
\\[0.5cm]

\inference[(T-If)]{\Gamma \vdash e_1 : M~\mbox{\it int}~wp_1 \\
           \Gamma \vdash e_2 : M~t~wp_2 &
           \Gamma \vdash e_3 : M~t~wp_3}
         {\Gamma \vdash \mbox{\it if0}~e_1~\mbox{\it then}~e_2~\mbox{\it else}~e_3 : M.\ite~t~wp_1~wp_2~wp_3}
\end{array}
\]
\end{small}
~~

```fstar
PURE.ITE t wp1 wp2 wp3 post = 
  PURE.bind wp1 (fun i -> i=0 ==> wp2 post /\ i<>0 ==> wp3 post)

STATE.ITE t wp1 wp2 wp3 post = 
  STATE.bind wp1 (fun i h1 -> i=0 ==> wp2 post h1 /\ i<>0 ==> wp3 post h1)
```
~

~Slide

### Typing applications

$\begin{scriptsize}
\inference{\Gamma \vdash e_1 : M~(x:t \rightarrow M~t'~wp)~wp_1\\
           \Gamma \vdash e_2 : M~t~wp_2 & \Gamma |- t'[e_2/x] : Type}
          {\Gamma \vdash e_1~e_2 : M~(t'[e_2/x])~(M.\bind~wp_1~(\fun~f \rightarrow M.\bind~wp_2~(\fun~x \rightarrow wp)))}
\end{scriptsize}$
~

~Slide
### Subsumption and proof obligations

$\Gamma \vdash M~t~wp \leq M'~t'~wp' \Leftarrow \phi$

* Subsumption for expressions

$\begin{scriptsize}
\inference{\Gamma \vdash e : M~t~wp &
           \Gamma \vdash M~t~wp \leq M'~t'~wp' \Leftarrow \phi &
           \mybox{\Gamma \vdash \phi~\mbox{valid}}}
          {\Gamma \vdash e : M'~t'~wp'}
\end{scriptsize}$

* Sub-effects using lift

$\begin{scriptsize}
\inference{}
          {\Gamma \vdash M~t~wp \leq M'~t~(\mbox{\it lift}_{M,M'}~t~wp) \Leftarrow True}
\end{scriptsize}$

* Weakening result, strengthening pre-conditions

$\begin{scriptsize}
\inference{\Gamma \vdash t \leq t' \Leftarrow \phi}
          {\Gamma \vdash M~t~wp \leq M~t'~wp' \Leftarrow \phi~\wedge~M.\mbox{\it strengthen}~wp~wp'}
\end{scriptsize}$

```fstar
PURE.strengthen wp wp'  = forall post. wp' post ==> wp post
STATE.strengthen wp wp' = forall post h. wp' post h ==> wp post h
```
~

~Slide

### Dynamic semantics

```
  H ::= . | H, (l -> v)
  v ::= () |  0 | 1 | ... | fun (x:t) -> e | l
  e ::= ... | l
  E ::= o | o e | v o | if0 o then e1 else e2 | !o | o := e2 | v := o

  
  In general: (H, e) ~> (H, e)
  For pure steps:  e ~> e


  e ~> e'

  if0 0 then e1 else e2 ~> e1
  if0 v then e1 else e2 ~> e2        when v <> 0
  (fun (x:t) -> e) v    ~> e[v/x]

  t ~> t'

  (fun (x:t) -> t') v    ~> t'[v/x]
  (fun (a:k) -> t') t    ~> t'[t/a]


  (H, e) ~> (H, e')

   e ~> e'
  ---------------------
  (H, e) ~> (H, e')


  (H, e) ~> (H', e')
  ---------------------
  (H, E[e]) ~> (H', E[e'])


  (H, !l) ~> (H, H(l))

  (H, l := v) ~> (H[l <- v], ())

```
~


~Slide
### Scaling to a usable, full-fledged language 

* A generic lattice of monadic effects; by default:
```fstar
{PURE, DIV, STATE, EXN, ALL}
```

* Refinement types, e.g, 
```fstar
type nat = x:int{x >= 0}
```

* Inductive data types and dependent pattern matching

* Recursive functions and semantic termination checks 

* Type inference mixing higher-order unification and subtyping

* Encoding higher-order VCs in a first-order logic for Z3

* Several compiler backends (OCaml, F#, JavaScript)
~

~Slide

### Plan

* Work through [http://www.fstar-lang.org/tutorial/]

* We hope to cover: Sections 1.1, 3.2, 3.3, 4.0, 4.1, 4.2
  
  -- Refinement types, dependent functions, indexed effects

  -- Proving properties about pure functions on ints and lists

* You should learn enough to try out more advanced parts of the tutorial independently

~

